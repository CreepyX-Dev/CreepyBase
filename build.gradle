plugins {
    id 'java'
    id 'maven-publish'
    id ("io.papermc.paperweight.userdev") version "2.0.0-beta.16"
    id ("com.gradleup.shadow") version "8.3.3"
    id("org.jetbrains.kotlin.jvm") version "2.2.0-Beta1"
}

// Allow overriding via -Pgroup and -Pversion (JitPack uses this)
group = project.findProperty("group") ?: 'com.creepyx'
version = project.findProperty("version") ?: '1.3.4'

// Task to generate the sources JAR
tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// Publishing configuration for JitPack
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java

            artifact tasks.named("sourcesJar").get()

            groupId = project.group
            artifactId = "CreepyBase" // Ensure this matches your repo/module name
            version = project.version
        }
    }

    repositories {
        mavenLocal()
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
    maven { url = "https://maven.enginehub.org/repo/" }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = "worldedit-repo"
        url = "https://mvn.intellectualsites.com/content/repositories/releases/"
    }
}

dependencies {
    paperweight.paperDevBundle('1.21.5-R0.1-SNAPSHOT')
    compileOnly ("dev.jorel:commandapi-bukkit-shade-mojang-mapped:9.7.0")
    compileOnly "org.jetbrains:annotations:25.0.0"
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.13'
    annotationProcessor "org.jetbrains:annotations:25.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.google.code.gson' && details.requested.name == 'gson') {
            details.useVersion '2.11.0'
        }
        if (details.requested.group == 'com.google.guava' && details.requested.name == 'guava') {
            details.useVersion '30.1-jre'
        }
        if (details.requested.group == 'it.unimi.dsi' && details.requested.name == 'fastutil') {
            details.useVersion '8.5.15'
        }
    }
}

kotlin {
    jvmToolchain(21)
}
